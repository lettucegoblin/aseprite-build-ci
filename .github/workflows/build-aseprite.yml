name: Build Aseprite

on:
  push:
    tags:
      - 'v*'
    branches: [ main, master, beta ]
  pull_request:
    branches: [ main, master, beta ]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build (main, beta, or specific version)'
        required: false
        default: 'main'
      build_type:
        description: 'Build type'
        required: false
        default: 'RelWithDebInfo'
        type: choice
        options:
          - RelWithDebInfo
          - Release
          - Debug

env:
  BRANCH: ${{ github.event.inputs.branch || 'main' }}
  BUILD_TYPE: ${{ github.event.inputs.build_type || 'RelWithDebInfo' }}
permissions:
  contents: write
jobs:
  build-windows:
    name: Build on Windows
    runs-on: windows-2022
    
    steps:
    - name: Setup Developer Command Prompt
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64
        sdk: 10.0.26100.0

    - name: Install Dependencies
      shell: pwsh
      run: |
        # Install Ninja if not available
        if (-not (Get-Command ninja -ErrorAction SilentlyContinue)) {
          Write-Host "Installing Ninja..."
          choco install ninja -y
          refreshenv
        }
        
        # Install Git if needed
        if (-not (Test-Path "$env:ProgramFiles\Git\bin")) {
          Write-Host "Installing Git..."
          choco install git -y
          refreshenv
        }
        
        # Add Git to PATH for bash compatibility
        $gitPath = "$env:ProgramFiles\Git\bin;$env:ProgramFiles\Git\usr\bin;$env:ProgramFiles\Git\mingw64\bin"
        $env:Path = "$gitPath;$env:Path"
        [System.Environment]::SetEnvironmentVariable("Path", $env:Path, [System.EnvironmentVariableTarget]::Process)
        
        # Install curl and unzip if needed
        if (-not (Get-Command curl -ErrorAction SilentlyContinue)) {
          choco install curl -y
        }
        if (-not (Get-Command unzip -ErrorAction SilentlyContinue)) {
          choco install unzip -y
        }

    - name: Install OpenSSL 1.1.x
      shell: pwsh
      run: |
        $ErrorActionPreference = 'Stop'
        # Prefer an explicit 1.1.x version. Adjust if your org feed has a different last 1.1 build.
        choco install openssl --version=1.1.1.2000 -y -r `
          || choco install openssl --version=1.1.1.1400 -y -r `
          || choco install openssl11 -y -r

    - name: Debug Write host listing out what's in OpenSSL paths
      shell: pwsh
      run: |
        $roots = @(
          "C:\Program Files\OpenSSL-Win64\bin",
          "C:\Program Files\OpenSSL-Win64\"
        ) | Where-Object { Test-Path $_ }
        
        Write-Host "Roots to check: $($roots -join ', ')"
        
        foreach ($r in $roots) {
          Write-Host "Contents of ${r}:"
          Get-ChildItem $r -Recurse | ForEach-Object { Write-Host $_.FullName }
        }

    - name: Clone Aseprite
      shell: bash
      run: |
        git clone --recursive https://github.com/aseprite/aseprite.git
        cd aseprite
        
        # Checkout specific branch if specified
        if [ "${{ env.BRANCH }}" != "main" ]; then
          git fetch --all --tags
          git checkout ${{ env.BRANCH }}
        fi
        
        # Update submodules
        git submodule update --init --recursive

    - name: Detect Skia Version
      id: skia-version
      shell: bash
      run: |
        cd aseprite
        
        # Get the required Skia tag from laf/misc/skia-tag.txt
        if [ -f "laf/misc/skia-tag.txt" ]; then
          SKIA_TAG=$(cat laf/misc/skia-tag.txt)
          echo "Found Skia tag: $SKIA_TAG"
        else
          # Fallback to m124 if file doesn't exist
          SKIA_TAG="m124-08a5439a6b"
          echo "Using default Skia tag: $SKIA_TAG"
        fi
        
        # Extract the Skia directory name (e.g., m124 from m124-08a5439a6b)
        SKIA_DIR_NAME="skia-$(echo $SKIA_TAG | cut -d '-' -f 1)"
        
        echo "SKIA_TAG=$SKIA_TAG" >> $GITHUB_OUTPUT
        echo "SKIA_DIR_NAME=$SKIA_DIR_NAME" >> $GITHUB_OUTPUT
        
        # Determine branch type for base branch detection
        BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
        if [[ "$BRANCH_NAME" == "main" || "$BRANCH_NAME" == "beta" ]]; then
          BASE_BRANCH="$BRANCH_NAME"
        else
          # Check if this branch is based on beta or main
          if git branch --contains origin/beta | grep -q "^\* $BRANCH_NAME\$" 2>/dev/null; then
            BASE_BRANCH="beta"
          else
            BASE_BRANCH="main"
          fi
        fi
        echo "BASE_BRANCH=$BASE_BRANCH" >> $GITHUB_OUTPUT

    - name: Cache Skia
      id: cache-skia
      uses: actions/cache@v4
      with:
        path: C:/deps/${{ steps.skia-version.outputs.SKIA_DIR_NAME }}
        key: skia-${{ steps.skia-version.outputs.SKIA_TAG }}-windows-${{ env.BUILD_TYPE }}-v3

    - name: Download Skia
      if: steps.cache-skia.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cd aseprite
        
        # Create deps directory
        mkdir -p /c/deps/${{ steps.skia-version.outputs.SKIA_DIR_NAME }}
        cd /c/deps/${{ steps.skia-version.outputs.SKIA_DIR_NAME }}
        
        # Determine which Skia build to download
        if [[ "${{ env.BUILD_TYPE }}" == "Debug" ]]; then
          SKIA_BUILD="Debug"
        else
          SKIA_BUILD="Release"
        fi
        
        # Get the Skia URL using the laf script
        if [ -f "$GITHUB_WORKSPACE/aseprite/laf/misc/skia-url.sh" ]; then
          SKIA_URL=$(bash $GITHUB_WORKSPACE/aseprite/laf/misc/skia-url.sh $SKIA_BUILD)
        else
          # Fallback URL construction if script doesn't exist
          SKIA_URL="https://github.com/aseprite/skia/releases/download/${{ steps.skia-version.outputs.SKIA_TAG }}/Skia-Windows-${SKIA_BUILD}-x64.zip"
        fi
        
        echo "Downloading Skia from: $SKIA_URL"
        SKIA_FILE=$(basename $SKIA_URL)
        
        # Download Skia
        curl --ssl-revoke-best-effort -L -o "$SKIA_FILE" "$SKIA_URL"
        
        # Extract Skia
        unzip -n "$SKIA_FILE"
        
        # Verify extraction
        if [[ "${{ env.BUILD_TYPE }}" == "Debug" ]]; then
          EXPECTED_DIR="out/Debug-x64"
        else
          EXPECTED_DIR="out/Release-x64"
        fi
        
        if [ ! -d "$EXPECTED_DIR" ]; then
          echo "Error: Expected Skia directory $EXPECTED_DIR not found after extraction"
          ls -la
          exit 1
        fi
        
        echo "Skia downloaded and extracted successfully"

    - name: Configure with CMake
      shell: bash
      run: |
        cd aseprite
        
        # Set up paths
        SOURCE_DIR="$PWD"
        BUILD_DIR="$PWD/build"
        SKIA_DIR="/c/deps/${{ steps.skia-version.outputs.SKIA_DIR_NAME }}"
        
        # Determine Skia library directory based on build type
        if [[ "${{ env.BUILD_TYPE }}" == "Debug" ]]; then
          SKIA_LIBRARY_DIR="$SKIA_DIR/out/Debug-x64"
        else
          SKIA_LIBRARY_DIR="$SKIA_DIR/out/Release-x64"
        fi
        
        echo "======================== CONFIGURATION ========================"
        echo "Build type: ${{ env.BUILD_TYPE }}"
        echo "Build dir: $BUILD_DIR"
        echo "Source dir: $SOURCE_DIR"
        echo "Skia dir: $SKIA_DIR"
        echo "Skia library dir: $SKIA_LIBRARY_DIR"
        echo "Branch: ${{ steps.skia-version.outputs.BASE_BRANCH }}"
        
        # Run CMake configuration (following build.sh pattern)
        cmake -B "$BUILD_DIR" -S "$SOURCE_DIR" -G Ninja \
              -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
              -DLAF_BACKEND=skia \
              -DSKIA_DIR="$SKIA_DIR" \
              -DSKIA_LIBRARY_DIR="$SKIA_LIBRARY_DIR"

    - name: Build Aseprite
      shell: bash
      run: |
        cd aseprite
        echo "============================== BUILDING =============================="
        cmake --build build -- aseprite

    - name: Test Build
      shell: bash
      continue-on-error: true
      run: |
        cd aseprite/build/bin
        echo "Testing aseprite.exe..."
        if [ -f "aseprite.exe" ]; then
          echo "Aseprite executable found"
          ls -la aseprite.exe
          # Try to get version (may fail without display)
          ./aseprite.exe --version || echo "Version check failed (expected without display)"
        else
          echo "ERROR: aseprite.exe not found!"
          ls -la
          exit 1

    - name: Bundle OpenSSL 1.1 DLLs
      shell: pwsh
      run: |
            $ErrorActionPreference = 'Stop'
            # Destination = the already-existing build output folder
            $dest = "$(Resolve-Path 'aseprite/build/bin')"

            # Where OpenSSL 1.1 was installed
            $roots = @(
            "C:\Program Files\OpenSSL-Win64\bin",
            "C:\Program Files\OpenSSL-Win64\"
            ) | Where-Object { Test-Path $_ }

            $crypto = $null; $ssl = $null
            foreach ($r in $roots) {
            if (-not $crypto) { $crypto = Get-ChildItem $r -Recurse -Filter 'libcrypto-1_1-x64.dll' -ErrorAction SilentlyContinue | Select-Object -First 1 }
            if (-not $ssl)    { $ssl    = Get-ChildItem $r -Recurse -Filter 'libssl-1_1-x64.dll'    -ErrorAction SilentlyContinue | Select-Object -First 1 }
            }
            if (-not $crypto -or -not $ssl) { throw "Could not find OpenSSL 1.1 DLLs" }

            Copy-Item $crypto.FullName -Destination $dest -Force
            Copy-Item $ssl.FullName    -Destination $dest -Force
            Write-Host "Bundled into $dest"
    - name: Package Artifacts
      shell: bash
      run: |
        cd aseprite
        ARTIFACT_DIR="aseprite-windows-${{ env.BUILD_TYPE }}"
        
        # Copy binaries
        cp -r build/bin "$ARTIFACT_DIR"
        
        # Create info file
        cat > "$ARTIFACT_DIR/BUILD_INFO.txt" << EOF
        Aseprite Build Information
        ==========================
        Branch: ${{ env.BRANCH }}
        Base Branch: ${{ steps.skia-version.outputs.BASE_BRANCH }}
        Build Type: ${{ env.BUILD_TYPE }}
        Skia Version: ${{ steps.skia-version.outputs.SKIA_TAG }}
        Build Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        Commit: $(git rev-parse HEAD)
        
        To run Aseprite:
        1. Extract all files
        2. Run aseprite.exe
        
        Note: This is an unofficial build. Consider purchasing Aseprite
        from https://www.aseprite.org/ to support the developers.
        EOF
        
        # Create ZIP archive (bsdtar supports zip format on Windows)
        tar -c --format=zip -f aseprite-windows-${{ env.BUILD_TYPE }}.zip "$ARTIFACT_DIR"

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: aseprite-windows-${{ env.BUILD_TYPE }}-${{ github.run_number }}
        path: aseprite/aseprite-windows-${{ env.BUILD_TYPE }}.zip
        retention-days: 30

  build-macos:
    name: Build on macOS
    runs-on: macos-latest
    
    steps:
    - name: Install Dependencies
      run: |
        brew install cmake ninja

    - name: Clone Aseprite
      run: |
        git clone --recursive https://github.com/aseprite/aseprite.git
        cd aseprite
        
        if [ "${{ env.BRANCH }}" != "main" ]; then
          git fetch --all --tags
          git checkout ${{ env.BRANCH }}
        fi
        
        git submodule update --init --recursive

    - name: Detect Skia Version
      id: skia-version
      run: |
        cd aseprite
        
        if [ -f "laf/misc/skia-tag.txt" ]; then
          SKIA_TAG=$(cat laf/misc/skia-tag.txt)
        else
          SKIA_TAG="m124-08a5439a6b"
        fi
        
        SKIA_DIR_NAME="skia-$(echo $SKIA_TAG | cut -d '-' -f 1)"
        
        # Detect architecture
        if [[ $(uname -m) == "arm64" ]]; then
          ARCH="arm64"
        else
          ARCH="x64"
        fi
        
        echo "SKIA_TAG=$SKIA_TAG" >> $GITHUB_OUTPUT
        echo "SKIA_DIR_NAME=$SKIA_DIR_NAME" >> $GITHUB_OUTPUT
        echo "ARCH=$ARCH" >> $GITHUB_OUTPUT

    - name: Cache Skia
      id: cache-skia
      uses: actions/cache@v4
      with:
        path: ~/deps/${{ steps.skia-version.outputs.SKIA_DIR_NAME }}
        key: skia-${{ steps.skia-version.outputs.SKIA_TAG }}-macos-${{ steps.skia-version.outputs.ARCH }}-v3

    - name: Download Skia
      if: steps.cache-skia.outputs.cache-hit != 'true'
      run: |
        cd aseprite
        
        mkdir -p ~/deps/${{ steps.skia-version.outputs.SKIA_DIR_NAME }}
        cd ~/deps/${{ steps.skia-version.outputs.SKIA_DIR_NAME }}
        
        # Get the Skia URL
        if [ -f "$GITHUB_WORKSPACE/aseprite/laf/misc/skia-url.sh" ]; then
          SKIA_URL=$(bash $GITHUB_WORKSPACE/aseprite/laf/misc/skia-url.sh Release)
        else
          SKIA_URL="https://github.com/aseprite/skia/releases/download/${{ steps.skia-version.outputs.SKIA_TAG }}/Skia-macOS-Release-${{ steps.skia-version.outputs.ARCH }}.zip"
        fi
        
        echo "Downloading Skia from: $SKIA_URL"
        curl -L -o skia.zip "$SKIA_URL"
        unzip -n skia.zip
        rm skia.zip

    - name: Configure and Build
      run: |
        cd aseprite
        
        SOURCE_DIR="$PWD"
        BUILD_DIR="$PWD/build"
        SKIA_DIR="$HOME/deps/${{ steps.skia-version.outputs.SKIA_DIR_NAME }}"
        SKIA_LIBRARY_DIR="$SKIA_DIR/out/Release-${{ steps.skia-version.outputs.ARCH }}"
        
        # Configure with macOS deployment target
        cmake -B "$BUILD_DIR" -S "$SOURCE_DIR" -G Ninja \
              -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
              -DCMAKE_OSX_DEPLOYMENT_TARGET=11.0 \
              -DLAF_BACKEND=skia \
              -DSKIA_DIR="$SKIA_DIR" \
              -DSKIA_LIBRARY_DIR="$SKIA_LIBRARY_DIR"
        
        # Build
        cmake --build "$BUILD_DIR" -- aseprite

    - name: Package and Upload
      run: |
        cd aseprite
        tar -czf aseprite-macos-${{ env.BUILD_TYPE }}.tar.gz build/bin
        
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: aseprite-macos-${{ env.BUILD_TYPE }}-${{ github.run_number }}
        path: aseprite/aseprite-macos-${{ env.BUILD_TYPE }}.tar.gz
        retention-days: 30

  release:
    name: Create Release
    permissions:
      contents: write
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Display structure
      run: ls -R artifacts
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          artifacts/**/*.tar.gz
          artifacts/**/*.zip
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## Aseprite Build
          
          This release includes builds for:
          - Windows (x64)
          - macOS (x64/arm64)
          
          ### Installation
          1. Download the appropriate archive for your platform
          2. Extract all files to a folder
          3. Run the aseprite executable
          
          ### Note
          These are unofficial builds. Please consider purchasing Aseprite from https://www.aseprite.org/ to support the developers.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}